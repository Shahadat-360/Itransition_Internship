@{
    ViewData["Title"] = "Edit Response";
    var template = ViewData["Template"] != null ? (FormsApp.Models.FormTemplate)ViewData["Template"] : null;
    var questions = ViewData["Questions"] != null ? (List<FormsApp.Models.Question>)ViewData["Questions"] : new List<FormsApp.Models.Question>();
    var answers = ViewData["Answers"] != null ? (Dictionary<int, FormsApp.Models.Answer>)ViewData["Answers"] : new Dictionary<int, FormsApp.Models.Answer>();
    var responseId = ViewData["ResponseId"] != null ? (int)ViewData["ResponseId"] : 0;
    var version = ViewData["Version"] != null ? (string)ViewData["Version"] : string.Empty;
}

<style>
    .poll-option {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 10px;
        margin-bottom: 10px !important;
        transition: all 0.2s ease;
    }
    
    .poll-option:hover {
        background-color: #f8f9fa;
    }
    
    .poll-option.selected {
        background-color: #e9f7ef;
        border-color: #28a745;
    }
    
    .poll-option .form-check-label {
        width: 100%;
        cursor: pointer;
    }
    
    .poll-option .progress {
        flex-grow: 1;
        transition: all 0.5s ease;
    }
    
    .option-text {
        font-weight: 500;
        min-width: 150px;
    }
</style>

<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            @if (template != null)
            {
                <li class="breadcrumb-item"><a asp-controller="FormTemplate" asp-action="Details" asp-route-id="@template.Id">@template.Title</a></li>
            }
            <li class="breadcrumb-item"><a asp-controller="FormResponse" asp-action="Details" asp-route-id="@responseId">Response Details</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Response</li>
        </ol>
    </nav>

    @if (template != null)
    {
        <div class="mb-4">
            <h1>@ViewData["Title"]: @template.Title</h1>
            <p class="lead">Update your answers to this form.</p>
        </div>

        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <form asp-action="Edit" method="post">
                    <input type="hidden" name="id" value="@responseId" />
                    <input type="hidden" name="version" value="@version" />
                    
                    @if (ViewData.ModelState.ErrorCount > 0)
                    {
                        <div class="alert alert-danger">
                            <div asp-validation-summary="All" class="mb-0"></div>
                        </div>
                    }
                    
                    @if (questions != null && questions.Any())
                    {
                        @foreach (var question in questions)
                        {
                            answers.TryGetValue(question.Id, out var answer);
                            
                            <div class="mb-4">
                                <label for="question_@question.Id" class="form-label fw-bold">@question.Text</label>
                                @if (!string.IsNullOrEmpty(question.Description))
                                {
                                    <p class="text-muted">@question.Description</p>
                                }
                                
                                @switch (question.Type)
                                {
                                    case FormsApp.Models.QuestionType.SingleLineText:
                                        <input type="text" id="question_@question.Id" name="question_@question.Id" 
                                               value="@(answer?.TextValue)" class="form-control" />
                                        break;
                                        
                                    case FormsApp.Models.QuestionType.MultiLineText:
                                        <textarea id="question_@question.Id" name="question_@question.Id" 
                                                  class="form-control" rows="3">@(answer?.TextValue)</textarea>
                                        break;
                                        
                                    case FormsApp.Models.QuestionType.Integer:
                                        <input type="number" id="question_@question.Id" name="question_@question.Id" 
                                               value="@(answer?.IntValue)" class="form-control" />
                                        break;
                                    
                                    case FormsApp.Models.QuestionType.MultipleChoice:
                                        @if (question.Options.Any())
                                        {
                                            <div class="form-group">
                                                <select id="question_@question.Id" name="question_@question.Id" class="form-select">
                                                    <option value="">-- Select an option --</option>
                                                    @foreach (var option in question.Options.OrderBy(o => o.Order))
                                                    {
                                                        bool isSelected = answer?.Text == option.Id.ToString();
                                                        if (isSelected)
                                                        {
                                                            <option value="@option.Id" selected>@option.Text</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@option.Id">@option.Text</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning">No options have been defined for this question.</div>
                                        }
                                        break;
                                    
                                    case FormsApp.Models.QuestionType.Poll:
                                        @if (question.Options.Any())
                                        {
                                            <div class="form-group poll-question" data-question-id="@question.Id">
                                                @foreach (var option in question.Options.OrderBy(o => o.Order))
                                                {
                                                    bool isChecked = answer != null && answer.Text == option.Id.ToString();
                                                    <div class="form-check mb-2 poll-option @(isChecked ? "selected" : "")">
                                                        <input class="form-check-input poll-option-input" type="radio" 
                                                              name="question_@question.Id" 
                                                              id="option_@(question.Id)_@(option.Id)" 
                                                              value="@option.Id"
                                                              data-option-id="@option.Id"
                                                              @(isChecked ? "checked" : "")>
                                                        <label class="form-check-label d-flex align-items-center" for="option_@(question.Id)_@(option.Id)">
                                                            <span class="option-text">@option.Text</span>
                                                            <div class="progress @(isChecked ? "" : "d-none") ms-3" style="height: 20px; width: 200px;">
                                                                <div class="progress-bar @(isChecked ? "bg-success" : "")" role="progressbar" style="width: 0%" 
                                                                    aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                                                            </div>
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning">No options have been defined for this poll.</div>
                                        }
                                        break;
                                }
                            </div>
                        }
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-controller="FormResponse" asp-action="Details" asp-route-id="@responseId" class="btn btn-outline-secondary">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <p class="mb-0">This form template doesn't have any questions.</p>
                        </div>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-controller="FormResponse" asp-action="Details" asp-route-id="@responseId" class="btn btn-outline-secondary">Back to Response</a>
                        </div>
                    }
                </form>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">
            <p class="mb-0">Template not found. Please return to the responses list.</p>
        </div>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <a asp-controller="FormResponse" asp-action="Index" class="btn btn-outline-secondary">Back to Responses</a>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // 1. Grab all poll-question wrappers
            const pollQuestions = document.querySelectorAll('.poll-question');

            pollQuestions.forEach(questionEl => {
                // 2. Read the question-ID via the dataset API
                // Try multiple approaches to ensure we get the correct ID
                const questionIdAttr = questionEl.getAttribute('data-question-id'); // Direct attribute access
                const questionIdDS = questionEl.dataset.questionId;  // dataset API
                
                // Ensure we have a proper number by explicit parsing
                const questionId = parseInt(questionIdAttr, 10);
                
                console.log('Question element:', questionEl);
                console.log('Attribute values - getAttribute:', questionIdAttr, 'dataset API:', questionIdDS, 'Parsed ID:', questionId);

                // 3. Wire up each radio inside this question
                questionEl.querySelectorAll('.poll-option-input').forEach(inputEl => {
                    inputEl.addEventListener('change', () => {
                        // Only fire once the user actually checks it
                        if (inputEl.checked) {
                            fetchAndShowPollResults(questionEl, questionId);
                        }
                    });
                });
                
                // 4. Show results for any initially checked options
                const checkedOption = questionEl.querySelector('.poll-option-input:checked');
                if (checkedOption) {
                    fetchAndShowPollResults(questionEl, questionId);
                }
            });
            
            // Fetch actual poll results from the server
            function fetchAndShowPollResults(questionElement, questionId) {
                // Extra verification to ensure we have a valid number
                if (!questionId || isNaN(questionId)) {
                    console.error("Invalid question ID detected:", questionId);
                    const rawId = questionElement.getAttribute('data-question-id');
                    console.log("Attempting to recover ID from element:", rawId);
                    questionId = parseInt(rawId, 10);
                    
                    if (isNaN(questionId)) {
                        console.error("Could not recover a valid question ID");
                        return; // Don't proceed with an invalid ID
                    }
                }
                
                // Use query parameter syntax instead of route parameter
                const fetchUrl = `/FormResponse/GetPollResults?questionId=${questionId}`;
                console.log(`Fetching poll results from URL: ${fetchUrl}`);
                
                // Show loading state
                const options = questionElement.querySelectorAll('.poll-option');
                options.forEach(option => {
                    const progressBar = option.querySelector('.progress');
                    progressBar.classList.remove('d-none');
                    
                    const progressBarInner = option.querySelector('.progress-bar');
                    progressBarInner.textContent = 'Loading...';
                    progressBarInner.style.width = '100%';
                    progressBarInner.classList.add('progress-bar-striped', 'progress-bar-animated');
                });
                
                // Fetch results from server
                fetch(fetchUrl, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Poll results data:', data); // Debug log
                        if (data.success) {
                            showPollResults(questionElement, data.results, data.totalVotes);
                        } else {
                            console.error('Error fetching poll results:', data.message, data.errorDetails || '');
                            // Show error state
                            options.forEach(option => {
                                const progressBar = option.querySelector('.progress');
                                const progressBarInner = option.querySelector('.progress-bar');
                                
                                // Make sure progress bar is visible
                                progressBar.classList.remove('d-none');
                                
                                // Set error state
                                progressBarInner.textContent = data.message || 'Error loading results';
                                progressBarInner.classList.add('bg-danger');
                                progressBarInner.style.width = '100%';
                                
                                // Try again after a short delay if it's a transient error
                                if (data.message === "An error occurred while retrieving poll results") {
                                    setTimeout(() => {
                                        fetchAndShowPollResults(questionElement, questionId);
                                    }, 2000); // Try again after 2 seconds
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Failed to fetch poll results:', error);
                        // Show more detailed error message
                        const errorMessage = error.toString();
                        options.forEach(option => {
                            const progressBar = option.querySelector('.progress');
                            const progressBarInner = option.querySelector('.progress-bar');
                            
                            // Make sure progress bar is visible
                            progressBar.classList.remove('d-none');
                            
                            // Set error state
                            progressBarInner.textContent = 'Error: ' + errorMessage;
                            progressBarInner.classList.add('bg-danger');
                            progressBarInner.style.width = '100%';
                        });
                    });
            }
            
            function showPollResults(questionElement, resultsData, totalVotes) {
                const options = questionElement.querySelectorAll('.poll-option');
                
                options.forEach(option => {
                    const input = option.querySelector('input');
                    const optionId = input.dataset.optionId;
                    console.log('Option ID:', optionId);
                    const progressBar = option.querySelector('.progress');
                    const progressBarInner = option.querySelector('.progress-bar');
                    
                    // Remove loading indicators
                    progressBarInner.classList.remove('progress-bar-striped', 'progress-bar-animated', 'bg-danger');
                    
                    // Show the progress bar
                    progressBar.classList.remove('d-none');
                    
                    // Get data for this option
                    const optionData = resultsData[optionId];
                    
                    if (optionData) {
                        const percentage = optionData.percentage;
                        const votes = optionData.votes;
                        
                        // Update the progress bar
                        progressBarInner.style.width = percentage + '%';
                        progressBarInner.setAttribute('aria-valuenow', percentage);
                        progressBarInner.textContent = `${percentage}% (${votes} vote${votes !== 1 ? 's' : ''})`;
                        
                        // Highlight the selected option
                        if (input.checked) {
                            option.classList.add('selected');
                            progressBarInner.classList.add('bg-success');
                        } else {
                            option.classList.remove('selected');
                            progressBarInner.classList.remove('bg-success');
                        }
                    } else {
                        // Handle missing data
                        progressBarInner.style.width = '0%';
                        progressBarInner.textContent = '0%';
                    }
                });
            }
        });
    </script>
} 