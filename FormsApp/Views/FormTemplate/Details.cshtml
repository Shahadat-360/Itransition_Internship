@model FormsApp.ViewModels.FormTemplateViewModel
@using System.Security.Claims
@using System.Web

@{
    ViewData["Title"] = Model.Title;
    var questions = ViewData["Questions"] as List<FormsApp.ViewModels.QuestionViewModel>;
    var comments = ViewData["Comments"] as List<FormsApp.ViewModels.CommentViewModel>;
    var canEdit = ViewData["CanEdit"] != null ? (bool)ViewData["CanEdit"] : false;
    var canFill = ViewData["CanFill"] != null ? (bool)ViewData["CanFill"] : false;
    var creatorId = ViewData["CreatorId"] as string;
}

@section Styles {
    <style>
        .comment-container {
            padding: 10px;
            border-radius: 6px;
        }
        
        .comment-container:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }
        
        .comment-actions {
            margin-left: 10px;
        }
    </style>
}

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <div class="mb-4">
                <h1 class="mb-1">@Model.Title</h1>
                <p class="text-muted mb-3">
                    <small>
                        <i class="bi bi-person me-1"></i> @Model.CreatorName
                        <span class="mx-2">|</span>
                        <i class="bi bi-calendar me-1"></i> Created: @Model.CreatedAt.ToShortDateString()
                        @if (Model.IsPublic)
                        {
                            <span class="mx-2">|</span>
                            <span class="badge bg-success">Public</span>
                        }
                        else
                        {
                            <span class="mx-2">|</span>
                            <span class="badge bg-secondary">Private</span>
                        }
                    </small>
                </p>
            </div>

            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-body text-center">
                        <img src="@Model.ImageUrl" class="img-fluid rounded" alt="@Model.Title cover image" style="width: 300px; height: 300px; object-fit: cover;">
                    </div>
                </div>
            }

            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title">Description</h5>
                    <p class="card-text">@Model.Description</p>
                    <h5 class="card-title mt-4">Topic</h5>
                    <p class="card-text">@Model.Topic</p>
                </div>
            </div>

            @if (questions != null && questions.Any())
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Questions</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var question in questions.OrderBy(q => q.Order))
                            {
                                <div class="list-group-item">
                                    <h5 class="mb-1">@question.Text</h5>
                                    @if (!string.IsNullOrEmpty(question.Description))
                                    {
                                        <p class="mb-1">@question.Description</p>
                                    }
                                    <small class="text-muted">
                                        Type: <span class="badge bg-secondary">@question.Type</span>
                                        @if (question.ShowInResults)
                                        {
                                            <span class="ms-2 badge bg-info">Shows in results</span>
                                        }
                                    </small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <p class="mb-0">This template has no questions yet. @(canEdit ? "Add questions to make it usable." : "")</p>
                </div>
            }

            @if (comments != null && comments.Any())
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Comments</h5>
                    </div>
                    <div class="card-body">
                        @{
                            var orderedComments = comments.OrderBy(c => c.CreatedAt).ToList();
                            var initialComments = orderedComments.Take(3).ToList();
                            var remainingComments = orderedComments.Skip(3).ToList();
                            var hasMoreComments = remainingComments.Any();
                        }

                        <div id="initial-comments">
                            @foreach (var comment in initialComments)
                            {
                                var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                                var isAdmin = User.IsInRole("Admin");
                                var isAuthor = currentUserId == comment.AuthorId;
                                var isTemplateCreator = currentUserId == creatorId;
                                var canModifyComment = isAuthor || isAdmin || isTemplateCreator;
                                
                                <div class="comment-container mb-3 position-relative">
                                    <div class="d-flex justify-content-between">
                                        <p class="mb-0"><strong>@comment.AuthorName</strong></p>
                                        @if (canModifyComment)
                                        {
                                            <div class="comment-actions d-none">
                                                <button class="btn btn-sm btn-outline-primary edit-comment-btn" 
                                                        data-comment-id="@comment.Id" 
                                                        data-comment-content="@HttpUtility.HtmlAttributeEncode(comment.Content)"
                                                        data-bs-toggle="modal" data-bs-target="#editCommentModal">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        onclick="prepareDeleteComment(@comment.Id)"
                                                        data-bs-toggle="modal" data-bs-target="#deleteCommentModal">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                    <p class="mb-2">@comment.Content</p>
                                    <small class="text-muted d-block text-end">@comment.CreatedAt.ToString("g")</small>
                                </div>
                                @if (comment != initialComments.Last())
                                {
                                    <hr />
                                }
                            }
                        </div>

                        @if (hasMoreComments)
                        {
                            <div id="remaining-comments" class="d-none">
                                @if(initialComments.Any())
                                {
                                    <hr />
                                }
                                @foreach (var comment in remainingComments)
                                {
                                    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                                    var isAdmin = User.IsInRole("Admin");
                                    var isAuthor = currentUserId == comment.AuthorId;
                                    var isTemplateCreator = currentUserId == creatorId;
                                    var canModifyComment = isAuthor || isAdmin || isTemplateCreator;
                                    
                                    <div class="comment-container mb-3 position-relative">
                                        <div class="d-flex justify-content-between">
                                            <p class="mb-0"><strong>@comment.AuthorName</strong></p>
                                            @if (canModifyComment)
                                            {
                                                <div class="comment-actions d-none">
                                                    <button class="btn btn-sm btn-outline-primary edit-comment-btn" 
                                                            data-comment-id="@comment.Id" 
                                                            data-comment-content="@HttpUtility.HtmlAttributeEncode(comment.Content)"
                                                            data-bs-toggle="modal" data-bs-target="#editCommentModal">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            onclick="prepareDeleteComment(@comment.Id)"
                                                            data-bs-toggle="modal" data-bs-target="#deleteCommentModal">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                        <p class="mb-2">@comment.Content</p>
                                        <small class="text-muted d-block text-end">@comment.CreatedAt.ToString("g")</small>
                                    </div>
                                    @if (comment != remainingComments.Last())
                                    {
                                        <hr />
                                    }
                                }
                            </div>
                            
                            <div class="text-center mt-3">
                                <button id="see-all-comments" class="btn btn-outline-primary">
                                    See All Comments
                                </button>
                                <button id="show-less-comments" class="btn btn-outline-secondary d-none">
                                    Show Less
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (User.Identity.IsAuthenticated)
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Add Comment</h5>
                    </div>
                    <div class="card-body">
                        <form asp-controller="FormTemplate" asp-action="AddComment" method="post">
                            <input type="hidden" name="TemplateId" value="@Model.Id" />
                            <div class="mb-3">
                                <textarea name="Content" class="form-control" rows="3" placeholder="Write your comment here..." required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Submit Comment</button>
                        </form>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-4">
            <div class="sticky-top" style="top: 20px; z-index: 100;">
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            @if (canFill && questions != null && questions.Any())
                            {
                                <a asp-controller="FormResponse" asp-action="Create" asp-route-id="@Model.Id" class="btn btn-success">
                                    <i class="bi bi-pencil-square me-1"></i> Fill Out Form
                                </a>
                            }

                            @if (canEdit)
                            {
                                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                                    <i class="bi bi-pencil me-1"></i> Edit Template
                                </a>
                                <a asp-controller="Question" asp-action="Index" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                    <i class="bi bi-list-check me-1"></i> Manage Questions
                                </a>
                                <a asp-controller="FormResponse" asp-action="ResultsForTemplate" asp-route-id="@Model.Id" class="btn btn-outline-info">
                                    <i class="bi bi-bar-chart me-1"></i> View Results
                                </a>
                                <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteTemplateModal">
                                    <i class="bi bi-trash me-1"></i> Delete Template
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div>Likes</div>
                        <div><i class="bi bi-heart-fill text-danger me-1"></i> @Model.LikesCount</div>
                    </div>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <form asp-action="ToggleLike" method="post">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <div class="d-grid">
                                <button type="submit" class="btn @(Model.CurrentUserLiked ? "btn-danger" : "btn-outline-danger")">
                                    @if (Model.CurrentUserLiked)
                                    {
                                        <i class="bi bi-heart-fill me-1"></i> <span>Unlike</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-heart me-1"></i> <span>Like</span>
                                    }
                                </button>
                            </div>
                        </form>
                    }
                </div>
            </div>

            @if (Model.Tags != null && Model.Tags.Any())
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Tags</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex flex-wrap gap-1">
                            @foreach (var tag in Model.Tags)
                            {
                                <a asp-controller="Home" asp-action="SearchByTag" asp-route-tagName="@tag" class="badge bg-primary text-decoration-none">@tag</a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Template Modal -->
@if (canEdit)
{
    <div class="modal fade" id="deleteTemplateModal" tabindex="-1" aria-labelledby="deleteTemplateModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTemplateModalLabel">Delete Template</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this template? This will also delete all responses and can't be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form asp-action="Delete" method="post">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="btn btn-danger">Delete Template</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Comment Modal -->
<div class="modal fade" id="editCommentModal" tabindex="-1" aria-labelledby="editCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCommentModalLabel">Edit Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="FormTemplate" asp-action="EditComment" method="post">
                <div class="modal-body">
                    <input type="hidden" id="editCommentId" name="commentId" />
                    <input type="hidden" name="templateId" value="@Model.Id" />
                    <div class="mb-3">
                        <label for="editCommentContent" class="form-label">Comment</label>
                        <textarea id="editCommentContent" name="content" class="form-control" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Comment Modal -->
<div class="modal fade" id="deleteCommentModal" tabindex="-1" aria-labelledby="deleteCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteCommentModalLabel">Delete Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this comment? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-controller="FormTemplate" asp-action="DeleteComment" method="post">
                    <input type="hidden" id="deleteCommentId" name="commentId" />
                    <input type="hidden" name="templateId" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger">Delete Comment</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add hover effect to comment containers
            const commentContainers = document.querySelectorAll('.comment-container');
            commentContainers.forEach(container => {
                const actions = container.querySelector('.comment-actions');
                if (actions) {
                    container.addEventListener('mouseenter', () => {
                        actions.classList.remove('d-none');
                    });
                    container.addEventListener('mouseleave', () => {
                        actions.classList.add('d-none');
                    });
                }
            });
            
            // Handle edit comment button clicks
            document.querySelectorAll('.edit-comment-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const commentId = this.getAttribute('data-comment-id');
                    const commentContent = this.getAttribute('data-comment-content');
                    
                    document.getElementById('editCommentId').value = commentId;
                    document.getElementById('editCommentContent').value = commentContent;
                });
            });
            
            // Show all comments
            const seeAllButton = document.getElementById('see-all-comments');
            const showLessButton = document.getElementById('show-less-comments');
            const remainingComments = document.getElementById('remaining-comments');
            
            if (seeAllButton) {
                seeAllButton.addEventListener('click', function() {
                    remainingComments.classList.remove('d-none');
                    seeAllButton.classList.add('d-none');
                    showLessButton.classList.remove('d-none');
                });
            }
            
            if (showLessButton) {
                showLessButton.addEventListener('click', function() {
                    remainingComments.classList.add('d-none');
                    seeAllButton.classList.remove('d-none');
                    showLessButton.classList.add('d-none');
                });
            }
        });
        
        function prepareDeleteComment(commentId) {
            document.getElementById('deleteCommentId').value = commentId;
        }
    </script>
} 