@model List<FormsApp.ViewModels.QuestionViewModel>

@{
    ViewData["Title"] = "Manage Questions";
    var templateId = ViewBag.TemplateId;
    var templateTitle = ViewBag.TemplateTitle;
}

<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="FormTemplate" asp-action="Index">My Templates</a></li>
            <li class="breadcrumb-item"><a asp-controller="FormTemplate" asp-action="Edit" asp-route-id="@templateId">Edit Template</a></li>
            <li class="breadcrumb-item active" aria-current="page">Manage Questions</li>
        </ol>
    </nav>

    <!-- Notification Area -->
    <div id="notificationArea">
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle-fill me-2"></i> @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
    </div>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@ViewData["Title"]: @templateTitle</h1>
        <div>
            <a asp-controller="FormTemplate" asp-action="Details" asp-route-id="@templateId" class="btn btn-primary">
                <i class="bi bi-check2-circle me-1"></i> Done
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Questions</h5>
                    <div class="text-muted small">Drag questions to reorder</div>
                </div>
                <div class="card-body">
                    @if (Model == null || !Model.Any())
                    {
                        <div class="alert alert-info">
                            <p class="mb-0">No questions have been added to this template yet.</p>
                        </div>
                    }
                    else
                    {
                        <div id="question-list" class="list-group mb-3">
                            @foreach (var question in Model.OrderBy(q => q.Order))
                            {
                                <div class="list-group-item list-group-item-action" data-id="@question.Id" data-type="@((int)question.Type)">
                                    <div class="d-flex w-100 justify-content-between align-items-center">
                                        <h5 class="mb-1">
                                            <i class="bi bi-grip-vertical me-2 text-muted handle"></i>
                                            @question.Text
                                        </h5>
                                        <div>
                                            <button type="button" class="btn btn-sm btn-outline-primary edit-question" 
                                                    data-id="@question.Id" 
                                                    data-title="@question.Text"
                                                    data-description="@question.Description"
                                                    data-show-in-results="@question.ShowInResults.ToString().ToLower()"
                                                    data-type="@((int)question.Type)"
                                                    data-type-name="@question.Type.ToString()"
                                                    data-options='@Html.Raw(Json.Serialize(question.Options.Select(o => new { id = o.Id, text = o.Text, order = o.Order, questionId = o.QuestionId })))'>
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger delete-question" data-id="@question.Id">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="mb-1">@question.Description</p>
                                    <small class="text-muted">
                                        Type: <span class="badge bg-secondary">@question.Type</span>
                                        @if (question.ShowInResults)
                                        {
                                            <span class="ms-2 badge bg-info">Shows in results</span>
                                        }
                                    </small>
                                </div>
                            }
                        </div>
                        <form id="reorderForm" asp-controller="Question" asp-action="Reorder" method="post">
                            <input type="hidden" name="id" value="@templateId" />
                            <input type="hidden" id="questionOrder" name="questionIds" />
                        </form>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Add New Question</h5>
                </div>
                <div class="card-body">
                    <form id="createQuestionForm" asp-controller="Question" asp-action="Create" method="post">
                        <input type="hidden" name="TemplateId" value="@templateId" />
                        <input type="hidden" name="Required" value="false" />
                        <input type="hidden" name="Order" value="0" />
                        
                        <div class="mb-3">
                            <label for="questionType" class="form-label">Question Type</label>
                            <select id="questionType" name="Type" class="form-select" required>
                                <option value="0">Single Line Text</option>
                                <option value="1">Multi Line Text</option>
                                <option value="2">Integer</option>
                                <option value="3">Multiple Choice</option>
                                <option value="4">Poll</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="questionTitle" class="form-label">Question Title</label>
                            <input type="text" id="questionTitle" name="Text" class="form-control" required minlength="1" />
                            <div class="invalid-feedback">
                                Title is required
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="questionDescription" class="form-label">Description (Optional)</label>
                            <textarea id="questionDescription" name="Description" class="form-control" rows="2"></textarea>
                        </div>
                        
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" name="ShowInResults" id="showInResults" value="true" checked>
                            <label class="form-check-label" for="showInResults">
                                Show in results
                            </label>
                            <input type="hidden" name="ShowInResults" value="false" />
                        </div>
                        
                        <div id="optionsContainer" class="mb-3 d-none">
                            <label class="form-label">Options</label>
                            <div id="optionsList">
                                <div class="input-group mb-2">
                                    <input type="text" name="Options[0].Text" class="form-control" placeholder="Option text">
                                    <button type="button" class="btn btn-outline-danger remove-option">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <button type="button" id="addOption" class="btn btn-sm btn-outline-secondary mt-2">
                                <i class="bi bi-plus"></i> Add Option
                            </button>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Add Question</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Question Modal -->
<div class="modal fade" id="editQuestionModal" tabindex="-1" aria-labelledby="editQuestionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editQuestionModalLabel">Edit Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editQuestionForm" asp-controller="Question" asp-action="Edit" method="post">
                    <input type="hidden" id="editQuestionId" name="Id" />
                    <input type="hidden" name="TemplateId" value="@templateId" />
                    <input type="hidden" name="Required" value="false" />
                    <input type="hidden" id="editQuestionType" name="Type" />
                    <input type="hidden" name="Order" value="0" />
                    
                    <div class="mb-3">
                        <label class="form-label">Question Type</label>
                        <input type="text" id="editQuestionTypeDisplay" class="form-control" readonly />
                    </div>
                    
                    <div class="mb-3">
                        <label for="editQuestionTitle" class="form-label">Question Title</label>
                        <input type="text" id="editQuestionTitle" name="Text" class="form-control" required />
                        <div class="invalid-feedback">
                            Title is required
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="editQuestionDescription" class="form-label">Description (Optional)</label>
                        <textarea id="editQuestionDescription" name="Description" class="form-control" rows="2"></textarea>
                    </div>
                    
                    <div id="editOptionsContainer" class="mb-3 d-none">
                        <label class="form-label">Options</label>
                        <div id="editOptionsList">
                            <!-- Options will be added here dynamically -->
                        </div>
                        <button type="button" id="editAddOption" class="btn btn-sm btn-outline-secondary mt-2">
                            <i class="bi bi-plus"></i> Add Option
                        </button>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" name="ShowInResults" id="editShowInResults" value="true">
                        <label class="form-check-label" for="editShowInResults">
                            Show in results
                        </label>
                        <input type="hidden" name="ShowInResults" value="false" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveQuestionChanges">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Question Modal -->
<div class="modal fade" id="deleteQuestionModal" tabindex="-1" aria-labelledby="deleteQuestionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteQuestionModalLabel">Delete Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this question? This action cannot be undone.</p>
                <form id="deleteQuestionForm" asp-controller="Question" asp-action="Delete" method="post">
                    <input type="hidden" id="deleteQuestionId" name="id" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteQuestion">Delete Question</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        // Initialize sortable list
        const questionList = document.getElementById('question-list');
        if (questionList) {
            new Sortable(questionList, {
                handle: '.handle',
                animation: 150,
                onEnd: function(evt) {
                    updateQuestionOrder();
                }
            });
        }
        
        // Update question order
        function updateQuestionOrder() {
            const questions = document.querySelectorAll('#question-list .list-group-item');
            const questionIds = Array.from(questions).map(item => parseInt(item.dataset.id, 10));
            document.getElementById('questionOrder').value = JSON.stringify(questionIds);
            
            // Submit the reorder form
            document.getElementById('reorderForm').submit();
        }
        
        // Edit question
        const editButtons = document.querySelectorAll('.edit-question');
        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const id = this.dataset.id;
                const title = this.dataset.title;
                const description = this.dataset.description;
                const showInResults = this.dataset.showInResults === 'true';
                const type = parseInt(this.dataset.type);
                const typeName = this.dataset.typeName || 'Unknown Type';
                
                console.log("Editing question:", { id, title, description, showInResults, type, typeName });
                
                document.getElementById('editQuestionId').value = id;
                document.getElementById('editQuestionTitle').value = title;
                document.getElementById('editQuestionDescription').value = description;
                document.getElementById('editShowInResults').checked = showInResults;
                document.getElementById('editQuestionType').value = type;
                
                // Set the question type display text directly from the data attribute
                document.getElementById('editQuestionTypeDisplay').value = typeName;
                
                // Reset the options list
                const editOptionsList = document.getElementById('editOptionsList');
                editOptionsList.innerHTML = '';
                editOptionIndex = 0;
                
                console.log("Question type:", type, typeName);
                
                // Show/hide options container based on question type
                if (type === 3 || type === 4) { // MultipleChoice or Poll
                    document.getElementById('editOptionsContainer').classList.remove('d-none');
                    
                    // Update the label based on question type
                    const optionsLabel = document.getElementById('editOptionsContainer').querySelector('.form-label');
                    if (type === 3) {
                        optionsLabel.textContent = 'Options';
                    } else {
                        optionsLabel.textContent = 'Poll Options';
                    }
                    
                    // Clear existing options
                    editOptionsList.innerHTML = '';
                    editOptionIndex = 0;
                    
                    // Get options from data attribute
                    try {
                        console.log("Data options:", this.dataset.options);
                        const options = JSON.parse(this.dataset.options || '[]');
                        console.log("Parsed options:", options);
                        
                        if (options.length === 0) {
                            // Add at least one empty option if none exist
                            addEditOption('');
                        } else {
                            options.forEach((option, index) => {
                                if (option && option.text) {
                                    addEditOption(option.text);
                                }
                            });
                            
                            // If no options were added (all were empty), add one empty option
                            if (document.querySelectorAll('#editOptionsList .input-group').length === 0) {
                                addEditOption('');
                            }
                        }
                    } catch (e) {
                        console.error('Error parsing options:', e);
                        // Add one empty option as fallback
                        addEditOption('');
                    }
                } else {
                    document.getElementById('editOptionsContainer').classList.add('d-none');
                }
                
                const modal = new bootstrap.Modal(document.getElementById('editQuestionModal'));
                modal.show();
            });
        });
        
        // Add new option to edit form
        let editOptionIndex = 0;
        function addEditOption(optionText = '') {
            console.log("Adding option with text:", optionText);
            const optionsList = document.getElementById('editOptionsList');
            const newOption = document.createElement('div');
            newOption.className = 'input-group mb-2';
            
            // Escape the option text for HTML insertion
            const escapedText = optionText
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
                
            newOption.innerHTML = `
                <input type="text" name="Options[${editOptionIndex}].Text" class="form-control" placeholder="Option text" value="${escapedText}">
                <button type="button" class="btn btn-outline-danger edit-remove-option">
                    <i class="bi bi-trash"></i>
                </button>
            `;
            optionsList.appendChild(newOption);
            editOptionIndex++;
            
            // Add event listener to the new remove button
            const removeButton = newOption.querySelector('.edit-remove-option');
            removeButton.addEventListener('click', function() {
                removeEditOption(this);
            });
        }
        
        // Remove option from edit form
        function removeEditOption(button) {
            const optionGroup = button.closest('.input-group');
            optionGroup.remove();
            
            // Reindex the remaining options
            const inputs = document.querySelectorAll('#editOptionsList input');
            inputs.forEach((input, index) => {
                input.name = `Options[${index}].Text`;
            });
            editOptionIndex = inputs.length;
        }
        
        // Add option button in edit form
        document.getElementById('editAddOption').addEventListener('click', function() {
            addEditOption();
        });
        
        // Save question changes with form validation
        document.getElementById('saveQuestionChanges').addEventListener('click', function(event) {
            const form = document.getElementById('editQuestionForm');
            
            // Fix for checkboxes - remove the hidden field if checkbox is checked
            const showInResultsCheckbox = document.getElementById('editShowInResults');
            const hiddenInputs = form.querySelectorAll('input[type="hidden"][name="ShowInResults"]');
            
            if (showInResultsCheckbox.checked) {
                hiddenInputs.forEach(input => {
                    if (input !== showInResultsCheckbox) {
                        input.parentNode.removeChild(input);
                    }
                });
            }
            
            // Create a FormData object to see what's actually being submitted
            const formData = new FormData(form);
            console.log("Edit form data entries:");
            for (let pair of formData.entries()) {
                console.log(pair[0] + ": " + pair[1]);
            }
            
            // Get the Text field value directly from the input element
            const textField = form.querySelector('input[name="Text"]');
            const textValue = textField ? textField.value.trim() : '';
            
            // Set a hidden input with the value to ensure it gets submitted
            if (!form.querySelector('input[type="hidden"][name="Text"]') && textValue) {
                const hiddenTextInput = document.createElement('input');
                hiddenTextInput.type = 'hidden';
                hiddenTextInput.name = 'Text';
                hiddenTextInput.value = textValue;
                form.appendChild(hiddenTextInput);
            }
            
            // Check for required Text
            if (!textValue) {
                alert("Please enter a title for the question");
                return;
            }
            
            console.log("Edit form data before submit:", {
                id: form.elements["Id"].value,
                text: textValue || "MISSING",
                templateId: form.elements["TemplateId"].value,
                type: form.elements["Type"].value,
                showInResults: form.elements["ShowInResults"].value
            });
            
            // Check if the form is valid
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                
                // Add Bootstrap validation styles
                form.classList.add('was-validated');
                
                // Show an error message
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger mt-3';
                alertDiv.textContent = 'Please fill out all required fields.';
                
                // Remove any existing alert
                const existingAlert = form.querySelector('.alert');
                if (existingAlert) {
                    existingAlert.remove();
                }
                
                form.prepend(alertDiv);
                return;
            }
            
            // Validate options if this is a MultipleChoice or Poll question
            const questionType = parseInt(document.getElementById('editQuestionType').value);
            if ((questionType === 3 || questionType === 4)) {
                const optionsInputs = document.querySelectorAll('#editOptionsList input');
                
                // Check if there are options and the first one has text
                if (optionsInputs.length === 0 || !optionsInputs[0].value.trim()) {
                    event.preventDefault();
                    
                    // Show error for missing options
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger mt-3';
                    alertDiv.textContent = 'At least one option is required for this question type.';
                    
                    // Remove any existing alert
                    const existingAlert = form.querySelector('.alert');
                    if (existingAlert) {
                        existingAlert.remove();
                    }
                    
                    form.prepend(alertDiv);
                    return;
                }
            }
            
            // If valid, submit the form
            form.submit();
        });
        
        // Delete question
        const deleteButtons = document.querySelectorAll('.delete-question');
        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const id = this.dataset.id;
                document.getElementById('deleteQuestionId').value = id;
                
                const modal = new bootstrap.Modal(document.getElementById('deleteQuestionModal'));
                modal.show();
            });
        });
        
        // Confirm delete question
        document.getElementById('confirmDeleteQuestion').addEventListener('click', function() {
            document.getElementById('deleteQuestionForm').submit();
        });
        
        // Show/hide options based on question type
        const questionType = document.getElementById('questionType');
        const optionsContainer = document.getElementById('optionsContainer');
        
        questionType.addEventListener('change', function() {
            // Show options for Multiple Choice (value 3) and Poll (value 4)
            if (this.value === '3' || this.value === '4') {
                optionsContainer.classList.remove('d-none');
                
                // Update the label based on question type
                const optionsLabel = optionsContainer.querySelector('.form-label');
                if (this.value === '3') {
                    optionsLabel.textContent = 'Options';
                } else {
                    optionsLabel.textContent = 'Poll Options';
                }
            } else {
                optionsContainer.classList.add('d-none');
            }
        });
        
        // Add new option
        let optionIndex = 1;
        document.getElementById('addOption').addEventListener('click', function() {
            const optionsList = document.getElementById('optionsList');
            const newOption = document.createElement('div');
            newOption.className = 'input-group mb-2';
            newOption.innerHTML = `
                <input type="text" name="Options[${optionIndex}].Text" class="form-control" placeholder="Option text">
                <button type="button" class="btn btn-outline-danger remove-option">
                    <i class="bi bi-trash"></i>
                </button>
            `;
            optionsList.appendChild(newOption);
            optionIndex++;
            
            // Add event listener to the new remove button
            const removeButtons = document.querySelectorAll('.remove-option');
            removeButtons[removeButtons.length - 1].addEventListener('click', function() {
                this.closest('.input-group').remove();
                
                // Reindex the remaining options
                const inputs = document.querySelectorAll('#optionsList input');
                inputs.forEach((input, index) => {
                    input.name = `Options[${index}].Text`;
                });
                optionIndex = inputs.length;
            });
        });
        
        // Remove option
        document.querySelectorAll('.remove-option').forEach(button => {
            button.addEventListener('click', function() {
                this.closest('.input-group').remove();
                
                // Reindex the remaining options
                const inputs = document.querySelectorAll('#optionsList input');
                inputs.forEach((input, index) => {
                    input.name = `Options[${index}].Text`;
                });
                optionIndex = inputs.length;
            });
        });

        // Restore the createQuestionForm submit handler
        document.getElementById('createQuestionForm').addEventListener('submit', function(event) {
            // Always prevent default first to handle validation
            event.preventDefault();
            
            const form = this;
            
            // Debug: Log all form elements
            console.log("All form elements:", form.elements);
            
            // Create a FormData object to see what's actually being submitted
            const formData = new FormData(form);
            console.log("Form data entries:");
            for (let pair of formData.entries()) {
                console.log(pair[0] + ": " + pair[1]);
            }
            
            // Fix for checkboxes - remove the hidden field if checkbox is checked
            const showInResultsCheckbox = document.getElementById('showInResults');
            const hiddenInputs = form.querySelectorAll('input[type="hidden"][name="ShowInResults"]');
            
            if (showInResultsCheckbox.checked) {
                hiddenInputs.forEach(input => {
                    if (input !== showInResultsCheckbox) {
                        input.parentNode.removeChild(input);
                    }
                });
            }
            
            // Get the Text field value - use querySelector to directly get the input element
            const textField = form.querySelector('input[name="Text"]');
            const textValue = textField ? textField.value.trim() : '';
            
            // Set a hidden input with the value to ensure it gets submitted
            if (!form.querySelector('input[type="hidden"][name="Text"]') && textValue) {
                const hiddenTextInput = document.createElement('input');
                hiddenTextInput.type = 'hidden';
                hiddenTextInput.name = 'Text';
                hiddenTextInput.value = textValue;
                form.appendChild(hiddenTextInput);
            }
            
            // Check for required Text
            if (!textValue) {
                alert("Please enter a title for the question");
                return false;
            }
            
            console.log("Form data before submit:", {
                text: textValue || "MISSING",
                templateId: form.elements["TemplateId"].value,
                type: form.elements["Type"].value,
                showInResults: form.elements["ShowInResults"].value
            });
            
            if (!form.checkValidity()) {
                event.stopPropagation();
                
                // Add Bootstrap validation styles
                form.classList.add('was-validated');
                
                // Show an error message
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger mt-3 mb-3';
                alertDiv.textContent = 'Please fill out all required fields.';
                
                // Remove any existing alert
                const existingAlert = form.querySelector('.alert');
                if (existingAlert) {
                    existingAlert.remove();
                }
                
                form.prepend(alertDiv);
                return false;
            }
            
            // Validate options if this is a MultipleChoice or Poll question
            const questionType = parseInt(document.getElementById('questionType').value);
            if ((questionType === 3 || questionType === 4)) {
                const optionsInputs = document.querySelectorAll('#optionsList input');
                
                // Check if there are options and the first one has text
                if (optionsInputs.length === 0 || !optionsInputs[0].value.trim()) {
                    // Show error for missing options
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger mt-3 mb-3';
                    alertDiv.textContent = 'At least one option is required for this question type.';
                    
                    // Remove any existing alert
                    const existingAlert = form.querySelector('.alert');
                    if (existingAlert) {
                        existingAlert.remove();
                    }
                    
                    form.prepend(alertDiv);
                    return false;
                }
            }
            
            // If we get here, form is valid - submit it
            form.submit();
        });
    </script>
} 